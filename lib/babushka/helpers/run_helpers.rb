module Babushka
  module RunHelpers
    include LogHelpers
    include ShellHelpers
    include PathHelpers

    def hostname
      removed! :instead => "#shell directly", :example => "shell('hostname -f')"
    end

    def rake cmd, &block
      removed! :instead => "#shell directly", :example => "shell({'RAILS_ENV' => env}, 'rake #{cmd}')"
    end

    def bundle_rake cmd, &block
      removed! :instead => "#shell directly", :example => "shell({'RAILS_ENV' => 'env'}, 'bundle exec #{cmd}')"
    end

    def check_file file_name, method_name
      removed! :instead => "Fancypath##{method_name}", :example => "path.p.#{method_name}"
    end

    def grep pattern, file
      removed! :instead => 'Fancypath#grep', :example => "#{file.inspect}.p.grep(#{pattern.inspect})"
    end

    def change_line line, replacement, filename
      removed! :instead => "sed via #shell", :example => "shell(\"sed -i'' -e 's/^#{Regexp.escape(line)}$/#{replacement}/' '#{filename}'\")"
    end

    def insert_into_file insert_before, path, lines, opts = {}
      removed! :instead => "a template with #render_erb"
    end

    def change_with_sed keyword, from, to, file
      removed! :instead => "sed via #shell", :example => "shell(\"sed -i'' -e 's/^#{Regexp.escape(keyword)}\\s+#{Regexp.escape(from)}\\b/#{keyword} #{to}/' '#{file}'\")"
    end

    def append_to_file text, file, opts = {}
      removed! :instead => 'Fancypath#append', :example => "'#{file}'.p.append(#{text.inspect})"
    end

    def _by_babushka
      "by babushka-#{VERSION} at #{Time.now}"
    end

    def edited_by_babushka
      "This line edited #{_by_babushka}"
    end

    def added_by_babushka nlines
      if nlines == 1
        "This line added #{_by_babushka}"
      else
        "These #{nlines} lines added #{_by_babushka}"
      end
    end

    def babushka_config? path
      if !path.p.exists?
        unmet "the config hasn't been generated yet"
      elsif !grep(/Generated by babushka/, path)
        unmet "the config needs to be regenerated"
      else
        true
      end
    end

    def yaml path
      removed! :instead => 'Fancypath#yaml', :example => "'#{path}'.p.yaml"
    end

    def render_erb erb, opts = {}
      if (path = erb_path_for(erb)).nil?
        log_error "If you use #render_erb within a dynamically defined dep, you have to give the full path to the erb template."
      elsif !File.exists?(path)
        log_error "Couldn't find erb to render at #{path}."
      elsif File.exists?(path)
        Renderable.new(opts[:to]).render(path, opts.merge(:context => self)).tap {|result|
          if result
            log "Rendered #{opts[:to]}."
          else
            log_error "Couldn't render #{opts[:to]}."
          end
        }
      end
    end

    def erb_path_for erb
      if erb.to_s.starts_with? '/'
        erb # absolute path
      elsif load_path
        File.dirname(load_path) / erb # directory this dep is in, plus relative path
      end
    end

    def log_and_open message, url
      removed! :instead => "a plain #log with the URL", :example => "log('Download here: http://website.org')"
    end

    def mysql cmd, username = 'root', include_password = true
      removed! :instead => "#shell directly", :example => "shell('mysql', '-u', username, :input => cmd.end_with(';'))"
    end
  end
end
